// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// valor de cada comida a cada 100 GmÂ´s de comida
model Food {
  id        String     @id @default(cuid())
  name      String
  calories  Int
  carbs     Int
  protein   Int
  fat       Int
  mealFoods MealFood[]
  userId    String
  createdBy User       @relation(fields: [userId], references: [id])
}

model Meal {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  mealType  String //qual a refeicao
  dateMeal  DateTime //qual o dia das refeicao 
  mealFoods MealFood[]

  @@index([userId])
}

model MealFood {
  id     String @id @default(cuid())
  mealId String
  meal   Meal   @relation(fields: [mealId], references: [id])
  foodId String
  food   Food   @relation(fields: [foodId], references: [id])

  @@index([mealId])
  @@index([foodId])
}

model TrainingDiary {
  id               String             @id @default(cuid())
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  trainingDay      String
  ExerciseTraining ExerciseTraining[]

  @@index([userId])
}

//valor da queima de calorias colocar a cada 1 minuto de treino
model Exercise {
  id               String             @id @default(cuid())
  name             String
  burnCalories     Int
  ExerciseTraining ExerciseTraining[]
  userId           String
  createdBy        User               @relation(fields: [userId], references: [id])
}

model ExerciseTraining {
  id         String        @id @default(cuid())
  exerciseId String
  exercise   Exercise      @relation(fields: [exerciseId], references: [id])
  trainingId String
  training   TrainingDiary @relation(fields: [trainingId], references: [id])

  @@index([exerciseId])
  @@index([trainingId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  gender        String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  height        Int?
  weight        Int?
  age           Int?
  targetWeight  Int?
  meals         Meal[]
  TrainingDiary TrainingDiary[]
  Exercise      Exercise[]
  Food          Food[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
